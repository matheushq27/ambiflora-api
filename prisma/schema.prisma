generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int        @id @default(autoincrement())
  name           String
  city           String
  state          String
  street         String
  postalCode     Int        @map("postal_code")
  country        String
  locationNumber Int        @map("location_number")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  Customer       Customer[]
  user           User[]

  @@map("companies")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  surname      String
  email        String         @unique
  password     String
  userType     UserType       @default(USER) @map("user_type")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  companyId    Int?           @map("company_id")
  anmProcesses AnmProcesses[]
  Company      Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Customer {
  id           Int            @id @default(autoincrement())
  name         String
  surname      String
  email        String
  cpf          String
  cnpj         String
  companyId    Int?           @map("company_id")
  type         CusomerType    @default(NATURAL_PERSON) @map("type")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  anmProcesses AnmProcesses[]
  Company      Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("customers")
}

model AnmProcesses {
  id              Int       @id @default(autoincrement())
  number          Int
  year            Int
  userId          Int?
  cardholderName  String    @map("cardholder_name")
  cpfCnpj         String    @map("cpf_cnpj")
  currentPhase    String    @map("current_phase")
  municipalities  String
  requirementType String    @map("requirement_type")
  situation       String
  substances      String
  typesOfUse      String    @map("types_of_use")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  customerId      Int?
  Customer        Customer? @relation(fields: [customerId], references: [id])
  User            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("anm_processes")
}

model MineralCondicaoPropriedadeSolo {
  IDCondicaoPropriedadeSolo      String                           @id(map: "key_condicao_solo")
  DSCondicaoPropriedadeSolo      String?
  MineralProcessoPropriedadeSolo MineralProcessoPropriedadeSolo[]

  
}

model MineralDocumentoLegal {
  IDDocumentoLegal      String                  @id(map: "key_documento_legal")
  DSDocumentoLegal      String?
  MineralProcessoTitulo MineralProcessoTitulo[]

  
}

model MineralEvento {
  IDEvento              String                  @id(map: "key_evento")
  DSEvento              String?
  MineralProcessoEvento MineralProcessoEvento[]

  
}

model MineralFaseProcesso {
  IDFaseProcesso  String            @id(map: "key_fase_processo")
  DSFaseProcesso  String?
  MineralProcesso MineralProcesso[]

  
}

model MineralMotivoEncerramentoSubstancia {
  IDMotivoEncerramentoSubstancia String                      @id(map: "key_motivo_encerramento_substancia")
  DSMotivoEncerramentoSubstancia String?
  MineralProcessoSubstancia      MineralProcessoSubstancia[]

  
}

model MineralMunicipio {
  IDMunicipio              String                     @id(map: "key_municipio")
  NMMunicipio              String?
  SGUF                     String?
  MineralProcessoMunicipio MineralProcessoMunicipio[]

  
}

model MineralPessoa {
  IDPessoa              String                  @id(map: "key_pessoa")
  NRCPFCNPJ             String?
  TPPessoa              String?
  NMPessoa              String?
  mineralProcessoPessoa MineralProcessoPessoa[]

  
}

model MineralProcesso {
  DSProcesso                           String                                @id(map: "key_processo")
  NRProcesso                           String?
  NRAnoProcesso                        String?
  BTAtivo                              String?
  NRNUP                                String?
  IDTipoRequerimento                   String?
  IDFaseProcesso                       String?
  IDUnidadeAdministrativaRegional      String?
  IDUnidadeProtocolizadora             String?
  DTProtocolo                          String?
  DTPrioridade                         String?
  QTAreaHA                             String?
  MineralFaseProcesso                  MineralFaseProcesso?                  @relation(fields: [IDFaseProcesso], references: [IDFaseProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_fase_processo")
  MineralTipoRequerimento              MineralTipoRequerimento?              @relation(fields: [IDTipoRequerimento], references: [IDTipoRequerimento], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_tipo_requerimento")
  MineralUnidadeAdministrativaRegional MineralUnidadeAdministrativaRegional? @relation(fields: [IDUnidadeAdministrativaRegional], references: [IDUnidadeAdministrativaRegional], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_unidade_administrativa")
  MineralUnidadeProtocolizadora        MineralUnidadeProtocolizadora?        @relation(fields: [IDUnidadeProtocolizadora], references: [IDUnidadeProtocolizadora], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_unidade_protocolizadora")
  MineralProcessoAssociacao            MineralProcessoAssociacao[]
  MineralProcessoDocumentacao          MineralProcessoDocumentacao[]
  MineralProcessoEvento                MineralProcessoEvento[]
  MineralProcessoMunicipio             MineralProcessoMunicipio[]
  MineralProcessoPessoa                MineralProcessoPessoa[]
  MineralProcessoPropriedadeSolo       MineralProcessoPropriedadeSolo[]
  MineralProcessoSubstancia            MineralProcessoSubstancia[]
  MineralProcessoTitulo                MineralProcessoTitulo[]

  
}

model MineralProcessoAssociacao {
  DSProcesso            String?
  DSProcessoAssociado   String?
  IDTipoAssociacao      String?
  DTAssociacao          String?
  DTDesassociacao       String?
  OBAssociacao          String?
  id                    Int                    @id(map: "pk_processo_associacao") @default(autoincrement())
  MineralTipoAssociacao MineralTipoAssociacao? @relation(fields: [IDTipoAssociacao], references: [IDTipoAssociacao], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_associacao")
  MineralProcesso       MineralProcesso?       @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_associacao")

  
}

model MineralProcessoDocumentacao {
  DSProcesso           String?
  IDTipoDocumento      String?
  DTProtocolo          String?
  id                   Int                   @id(map: "pk_processo_documentacao") @default(autoincrement())
  MineralTipoDocumento MineralTipoDocumento? @relation(fields: [IDTipoDocumento], references: [IDTipoDocumento], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_documento")
  MineralProcesso      MineralProcesso?      @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_documentacao")

  
}

model MineralProcessoEvento {
  DSProcesso      String?
  IDEvento        String?
  DTEvento        String?
  OBEvento        String?
  DSPublicacaoDOU String?
  id              Int              @id(map: "pk_processo_evento") @default(autoincrement())
  MineralEvento   MineralEvento?   @relation(fields: [IDEvento], references: [IDEvento], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_evento")
  MineralProcesso MineralProcesso? @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_evento")

  
}

model MineralProcessoMunicipio {
  DSProcesso       String?
  IDMunicipio      String?
  id               Int               @id(map: "pk_processo_municipio") @default(autoincrement())
  MineralMunicipio MineralMunicipio? @relation(fields: [IDMunicipio], references: [IDMunicipio], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_municipio")
  MineralProcesso  MineralProcesso?  @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_municipio")

  
}

model MineralProcessoPessoa {
  DSProcesso                         String?
  IDPessoa                           String?
  IDTipoRelacao                      String?
  IDTipoResponsabilidadeTecnica      String?
  IDTipoRepresentacaoLegal           String?
  DTPrazoArrendamento                String?
  DTInicioVigencia                   String?
  DTFimVigencia                      String?
  id                                 Int                                 @id(map: "pk_processo_pessoa") @default(autoincrement())
  MineralPessoa                      MineralPessoa?                      @relation(fields: [IDPessoa], references: [IDPessoa], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_pessoa")
  MineralProcesso                    MineralProcesso?                    @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_pessoa")
  MineralTipoRepresentacaoLegal      MineralTipoRepresentacaoLegal?      @relation(fields: [IDTipoRepresentacaoLegal], references: [IDTipoRepresentacaoLegal], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_representacao_legal")
  MineralTipoResponsabilidadeTecnica MineralTipoResponsabilidadeTecnica? @relation(fields: [IDTipoResponsabilidadeTecnica], references: [IDTipoResponsabilidadeTecnica], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_responsabilidade_tecnica")
  MineralTipoRelacao                 MineralTipoRelacao?                 @relation(fields: [IDTipoRelacao], references: [IDTipoRelacao], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_tipo_relacao")

  
}

model MineralProcessoPropriedadeSolo {
  DSProcesso                     String?
  IDCondicaoPropriedadeSolo      String?
  id                             Int                             @id(map: "pk_processo_propriedadesolo") @default(autoincrement())
  MineralProcesso                MineralProcesso?                @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_propriedade_solo")
  MineralCondicaoPropriedadeSolo MineralCondicaoPropriedadeSolo? @relation(fields: [IDCondicaoPropriedadeSolo], references: [IDCondicaoPropriedadeSolo], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_propriedade_solo")

  
}

model MineralProcessoSubstancia {
  DSProcesso                          String?
  IDSubstancia                        String?
  IDTipoUsoSubstancia                 String?
  IDMotivoEncerramentoSubstancia      String?
  DTInicioVigencia                    String?
  DTFimVigencia                       String?
  id                                  Int                                  @id(map: "pk_processo_substancia") @default(autoincrement())
  MineralMotivoEncerramentoSubstancia MineralMotivoEncerramentoSubstancia? @relation(fields: [IDMotivoEncerramentoSubstancia], references: [IDMotivoEncerramentoSubstancia], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_encerramento_substancia")
  MineralProcesso                     MineralProcesso?                     @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_substancia")
  MineralSubstancia                   MineralSubstancia?                   @relation(fields: [IDSubstancia], references: [IDSubstancia], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_substancia")
  MineralTipoUsoSubstancia            MineralTipoUsoSubstancia?            @relation(fields: [IDTipoUsoSubstancia], references: [IDTipoUsoSubstancia], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_tipo_substancia")

  
}

model MineralProcessoTitulo {
  DSProcesso                    String?
  NRTitulo                      String?
  IDDocumentoLegal              String?
  IDTipoDocumentoLegal          String?
  IDSituacaoDocumentoLegal      String?
  DTPublicacao                  String?
  DTVencimento                  String?
  id                            Int                            @id(map: "pk_processo_titulo") @default(autoincrement())
  MineralProcesso               MineralProcesso?               @relation(fields: [DSProcesso], references: [DSProcesso], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_processos_por_titulo")
  MineralDocumentoLegal         MineralDocumentoLegal?         @relation(fields: [IDDocumentoLegal], references: [IDDocumentoLegal], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_titulo_documento")
  MineralSituacaoDocumentoLegal MineralSituacaoDocumentoLegal? @relation(fields: [IDSituacaoDocumentoLegal], references: [IDSituacaoDocumentoLegal], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_titulo_situacao_documento")
  MineralTipoDocumentoLegal     MineralTipoDocumentoLegal?     @relation(fields: [IDTipoDocumentoLegal], references: [IDTipoDocumentoLegal], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_processo_titulo_tipo_documento")

  
}

model MineralSituacaoDocumentoLegal {
  IDSituacaoDocumentoLegal String                  @id(map: "key_situacao_documento_legal")
  DSSituacaoDocumentoLegal String?
  MineralProcessoTitulo    MineralProcessoTitulo[]

  
}

model MineralSubstancia {
  IDSubstancia              String                      @id(map: "key_substancia")
  NMSubstancia              String?
  MineralProcessoSubstancia MineralProcessoSubstancia[]

  
}

model MineralTipoAssociacao {
  IDTipoAssociacao          String                      @id(map: "key_associacao")
  DSTipoAssociacao          String?
  MineralProcessoAssociacao MineralProcessoAssociacao[]

  
}

model MineralTipoDocumento {
  IDTipoDocumento             String                        @id(map: "key_documento")
  DSTipoDocumento             String?
  MineralProcessoDocumentacao MineralProcessoDocumentacao[]

  
}

model MineralTipoDocumentoLegal {
  IDTipoDocumentoLegal  String                  @id(map: "key_tipo_documento_legal")
  DSTipoDocumentoLegal  String?
  MineralProcessoTitulo MineralProcessoTitulo[]

  
}

model MineralTipoRelacao {
  IDTipoRelacao         String                  @id(map: "key_tipo_relacao")
  DSTipoRelacao         String?
  MineralProcessoPessoa MineralProcessoPessoa[]

  
}

model MineralTipoRepresentacaoLegal {
  IDTipoRepresentacaoLegal String                  @id(map: "key_tipo_representacao")
  DSTipoRepresentacaoLegal String?
  MineralProcessoPessoa    MineralProcessoPessoa[]

  
}

model MineralTipoRequerimento {
  IDTipoRequerimento String            @id(map: "key_tipo_requerimento")
  DSTipoRequerimento String?
  MineralProcesso    MineralProcesso[]

  
}

model MineralTipoResponsabilidadeTecnica {
  IDTipoResponsabilidadeTecnica String                  @id(map: "key_tipo_responsabilidade")
  DSTipoResponsabilidadeTecnica String?
  MineralProcessoPessoa         MineralProcessoPessoa[]

  
}

model MineralTipoUsoSubstancia {
  IDTipoUsoSubstancia       String                      @id(map: "key_tipo_uso_substancia")
  DSTipoUsoSubstancia       String?
  MineralProcessoSubstancia MineralProcessoSubstancia[]

  
}

model MineralUnidadeAdministrativaRegional {
  IDUnidadeAdministrativaRegional String            @id(map: "key_unidade_adm_regional")
  DSUnidadeAdministrativaRegional String?
  MineralProcesso                 MineralProcesso[]

  
}

model MineralUnidadeProtocolizadora {
  IDUnidadeProtocolizadora String            @id(map: "key_unidade_protocolizadora")
  DSUnidadeProtocolizadora String?
  MineralProcesso          MineralProcesso[]

  
}

enum UserType {
  SUPER_ADMIN
  DEVELOPER
  ADMIN
  USER
}

enum CusomerType {
  NATURAL_PERSON
  CORPORATE_ENTITY
}
